{
  "name": "Generator-at-angular",
  "tagline": "Yeoman Generator for angular that uses Webpack2 as a module bundler, SASS as CSS preprocessor and UI router as default angular router.",
  "body": "# generator-at-angular\r\n\r\n> Yeoman generator for AngularJS + Webpack with ES6 and SASS.\r\n\r\n> * Babel 6 with ES2017 features.\r\n> * Latest Webpack with Tree Shaking feature enabled.\r\n> * SASS as CSS preprocessor.\r\n> * Angular UI router as default router.\r\n> * All necessary webpack loaders already included (Sass, Images, Fonts, ngAnnotate, ngTemplateCache, etc.)\r\n> * Proxy configured to make cross origin requests with a simple prefix.\r\n\r\n\r\n### Directory Layout\r\n\r\n```shell\r\n\r\n├── /config/                                         #Build config\r\n│   └── /webpack/                                    #Webpack config files\r\n│       ├── /environments/                           #Webpack env dependent configs\r\n│       └── global.js                                #Global webpack settings for all envs\r\n├── /dist/                                           #The built application directory to be deployed\r\n├── /node_modules/                                   #3rd-party libraries and utilities\r\n├── /src/                                            #Source folder\r\n│   ├── /app/                                        #Application code\r\n│   │   ├── /components/                             #Shared UI components\r\n│   │   │   └── /component/                          #Shared component. Place component's styles, components, directives, templates here\r\n│   │   │   │   ├── /components/                     #Nested components. Place nested components here.\r\n│   │   │   │   ├── /directives/                     #Component related directives.\r\n│   │   │   │   ├── /services/                       #Component services.\r\n│   │   │   │   ├── /component.component-spec.js     #Component unit tests JS                 \r\n│   │   │   │   ├── /component.component.js          #Component definition JS                 \r\n│   │   │   │   ├── /component.component.html        #Component template          \r\n│   │   │   │   ├── /component.module.js             #Component module                 \r\n│   │   │   │   └── /component.component.scss        #Component styles             \r\n│   │   ├── /core/                                   #Shared angular services/directives\r\n│   │   │   ├── /directives/                         #Shared directives\r\n│   │   │       └── /directive/                      #Shared directive. Place directive's templates and controller here.\r\n│   │   │   │   │   ├── /directive.directive-spec.js #Directive unit tests\r\n│   │   │   │   │   ├── /directive.directive.js      #Directive definition, link and controller\r\n│   │   │   │   │   ├── /directive.html              #Directive template\r\n│   │   │   │   │   └── /directive.scss              #Directive styles\r\n│   │   │   ├── /services/                           #Shared services\r\n│   │   │       └── /service/                        #Shared directive. Place directive's templates and controller here.\r\n│   │   │   │   │   ├── /service.factory-spec.js     #Service unit tests\r\n│   │   │   │   │   └── /service.factory.js          #Service definition\r\n│   │   │   └── /core.module.js                      #Import of all core components should be here\r\n│   │   ├── /pages/                                  #All pages-dependent content should place here\r\n│   │   │   ├── /page/                               #page\r\n│   │   │   │   ├── /page.controller-spec.js         #page Controller unit tests\r\n│   │   │   │   ├── /page.controller.js              #page Controller\r\n│   │   │   │   ├── /page.html                       #page template\r\n│   │   │   │   ├── /page.module.js                  #page module\r\n│   │   │   │   ├── /page.route.js                   #page routes\r\n│   │   │   │   └── /page.scss                       #page styles\r\n│   │   │   └── /.../                                #Other pages...\r\n│   │   ├── /index.bootstrap.js                      #Entry point. Import internal and external modules and bootstrap (RUN) angular application\r\n│   │   ├── /index.components.js                     #Custom components definition\r\n│   │   ├── /index.config.js                         #Function that will be triggered in Angular's \"config\" phase\r\n│   │   ├── /index.module.js                         #Main application's module\r\n│   │   ├── /index.routes.js                         #Describe only \"otherwise\" and async routes here\r\n│   │   ├── /index.run.js                            #Function that will be triggered in Angular's \"run\" phase\r\n│   │   ├── /index.vendor.js                         #Import all vendors and 3rd party plugins here\r\n│   ├── /assets/                                     #Static content\r\n│   │   ├── /fonts/                                  #Fonts\r\n│   │   ├── /images/                                 #Images\r\n│   │   ├── /js/                                     #Extra libs folder\r\n│   │   └── /styles/                                 #Styles folder\r\n│   │       ├── /css/                                #CSS, place external css files here\r\n│   │       └── /sass/                               #SASS\r\n│   │           └── /index.scss                      #Main SASS file, define your global styling here.\r\n│   ├── favicon.ico                                  #Application icon to be displayed in bookmarks\r\n│   └── tpl-index.ejs                                #Template for html-webpack-plugin that will be transpiled into index.html in /dist\r\n│── .babelrc                                         #Babel config with presets and plugins\r\n│── .gitignore                                       #List of files to ignore by git\r\n│── .yo-rc.json                                      #Defines the root of the project, allows your user to run commands in subdirectories.\r\n│── package.json                                     #The list of project dependencies and NPM scripts\r\n└── webpack.config.js                                #Bundling and optimization settings for Webpack\r\n```\r\n\r\n\r\nGetting Started\r\n-------------\r\n\r\nPrerequisites: Node, Yeoman and Webpack. To install run:\r\n\r\n    npm install -g yo webpack\r\n\r\nNext, install this generator:\r\n\r\n    Clone this repo and cd into it, then link it to npm:\r\n      git clone https://github.com/A-Tokyo/generator-at-angular\r\n      cd generator-at-angular\r\n      npm link\r\n\r\n\r\nCreating a project:\r\n\r\n    mkdir MyAwesomeApp && cd $_\r\n    yo at-angular\r\n\r\n\r\nRunning a generator:\r\n\r\n    yo at-angular:page my-page                                                    # Generates a page\r\n    yo at-angular:service my-service                                              # Generates a service\r\n    yo at-angular:service my-component/my-service                                 # Generates a service in a component\r\n    yo at-angular:directive my-directive                                          # Generates a shared directive\r\n    yo at-angular:directive my-component/my-directive                             # Generates a directive in a component\r\n    yo at-angular:component my-component                                          # Generates a component\r\n    yo at-angular:component my-component/my-nested-component                      # Generates a nested component\r\n    yo at-angular:component my-component/my-nested-component/my-nested2-component # Generates a double nested component\r\n\r\n\r\n##### `npm start` or `npm run dev` - to start development server on http://localhost:8080.\r\n##### `npm run build` - To make production-ready build run  after few moments you will see build id `dist` folder.\r\n\r\n\r\n### Out of the box optional supports:\r\n\r\n  > * **Angular Material:**\r\n       UI Component framework provides a set of reusable UI components based on Google’s Material Design. https://material.angularjs.org/latest/getting-started\r\n\r\n\r\n### Known bugs:\r\n  > * **Problem:** Webpack2 unable to import function with only export default value.\r\n\r\n  >   **Workaround**: Use ```import * as variable from 'package' ``` instead of ```import variable from 'package' ```\r\n\r\n\r\n### Contribution:\r\n\r\n#### To Contribute:\r\n  > * Fork repository and clone it.\r\n  > * Install npm packages and create new branch.\r\n  > * Link local project to be able use generator with `yo` by running: `npm link`\r\n  > * Contribute to the project and push your changes.\r\n  > * Make a Pull Request.\r\n\r\n#### Style Guide:\r\n  This project uses single-quotes, two space indentation, multiple var statements and multiple comments per function. Use a single space after keywords. Ex: var x = function() { ... }\r\n\r\n\r\n##### TODO:\r\n  > * Add Karma Testing\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}